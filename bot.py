import asyncio
import os
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from db import init_db, add_reminder, add_repeating, get_repeating, get_reminders, delete_reminder, clear_user_tasks

# ‚ö†Ô∏è –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.environ.get("API_TOKEN")

if not API_TOKEN:
    raise ValueError("8467618548:AAG5q1K8cGnHJvLg_RVopDrWIjxeV84E86I")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# ------------------------------
# –ö–æ–º–∞–Ω–¥—ã
# ------------------------------
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    reply_kb.add(
        KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"),
        KeyboardButton("üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    )
    reply_kb.add(
        KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
        KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
    )

    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç‚Äë–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üìÖ\n\n"
        "‚úç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç: —á–∞–π\n"
        "‚Ä¢ 15.07.2025 08:30: —Å–∞–º–æ–ª—ë—Ç\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 09:00: –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 20:00: –≤—Å—Ç—Ä–µ—á–∞\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞: –∫–æ—Ñ–µ\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:00: –±–µ–≥\n"
        "‚Ä¢ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–Ω 18:00: —Å–ø–æ—Ä—Ç\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É üëá",
        reply_markup=reply_kb
    )


@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    await message.reply(
        "‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç: –∫–æ—Ñ–µ\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞: —É—Ä–æ–∫–∏\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00: –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 18:30: –∫–æ–Ω—Ü–µ—Ä—Ç\n"
        "‚Ä¢ 31.12.2025 23:59: –Ω–æ–≤—ã–π –≥–æ–¥ üéâ\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:30: –±–µ–≥\n"
        "‚Ä¢ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤—Ç 19:00: –∑–≤–æ–Ω–æ–∫ –º–∞–º–µ\n"
    )


@dp.message_handler(commands=["listall"])
async def listall_cmd(message: types.Message):
    uid = message.from_user.id
    tasks = []
    for rid, _, t, task in get_reminders(uid):
        dt = datetime.fromisoformat(t)
        tasks.append(f"üïê {task} ‚è∞ {dt.strftime('%d.%m.%Y %H:%M')}")
    for rid, _, typ, data, task in get_repeating(uid):
        if typ == "daily":
            h, m = map(int, data.split(":"))
            tasks.append(f"üîÅ {task} ‚è∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å {h:02d}:{m:02d}")
        elif typ == "weekly":
            tasks.append(f"üóì {task} ‚è∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é {data}")
    if tasks:
        await message.reply("üìã –ó–∞–¥–∞—á–∏:\n" + "\n".join(tasks))
    else:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á")


@dp.message_handler(commands=["today"])
async def today_cmd(message: types.Message):
    uid = message.from_user.id
    now = datetime.now()
    today = []
    for _, _, t, task in get_reminders(uid):
        dt = datetime.fromisoformat(t)
        if dt.date() == now.date():
            today.append(f"üïê {task} ‚è∞ {dt.strftime('%H:%M')}")
    if today:
        await message.reply("üìã –°–µ–≥–æ–¥–Ω—è:\n" + "\n".join(today))
    else:
        await message.reply("–°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç ‚úÖ")


# ------------------------------
# –†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
# ------------------------------
@dp.message_handler(lambda m: m.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
async def btn_listall(message: types.Message):
    await listall_cmd(message)

@dp.message_handler(lambda m: m.text == "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def btn_today(message: types.Message):
    await today_cmd(message)

@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def btn_help(message: types.Message):
    await help_cmd(message)

@dp.message_handler(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
async def btn_clear(message: types.Message):
    clear_user_tasks(message.from_user.id)
    await message.answer("üóë –í—Å–µ —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!")


# ------------------------------
# –ü–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á
# ------------------------------
@dp.message_handler()
async def add_tasks(message: types.Message):
    uid = message.from_user.id
    txt = message.text.lower().strip()

    # 1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
    m = re.match(r"(\d{1,2})[.\-/](\d{1,2})[.\-/](\d{4})\s+(\d{1,2}):(\d{2})[: ]?(.*)", txt)
    if m:
        d, mo, y = int(m.group(1)), int(m.group(2)), int(m.group(3))
        h, mi, what = int(m.group(4)), int(m.group(5)), m.group(6)
        dt = datetime(y, mo, d, h, mi)
        add_reminder(uid, dt, what)
        await message.reply(f"üìÖ {what} –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}")
        return

    # 2. –ó–∞–≤—Ç—Ä–∞
    m = re.match(r"–∑–∞–≤—Ç—Ä–∞ –≤\s+(\d{1,2}):(\d{2})[: ]?(.*)", txt)
    if m:
        h, mi, what = int(m.group(1)), int(m.group(2)), m.group(3)
        dt = datetime.now() + timedelta(days=1)
        dt = dt.replace(hour=h, minute=mi, second=0, microsecond=0)
        add_reminder(uid, dt, what)
        await message.reply(f"üìÖ –ó–∞–≤—Ç—Ä–∞ {what} –≤ {dt.strftime('%H:%M')}")
        return

    # 3. –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    m = re.match(r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤\s+(\d{1,2}):(\d{2})[: ]?(.*)", txt)
    if m:
        h, mi, what = int(m.group(1)), int(m.group(2)), m.group(3)
        dt = datetime.now() + timedelta(days=2)
        dt = dt.replace(hour=h, minute=mi, second=0, microsecond=0)
        add_reminder(uid, dt, what)
        await message.reply(f"üìÖ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ {what} –≤ {dt.strftime('%H:%M')}")
        return

    # 4. –ß–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç / —á–∞—Å–æ–≤
    m = re.match(r"—á–µ—Ä–µ–∑ (\d+) (–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å[–∞—É–æ–≤]*)[: ]?(.*)", txt)
    if m:
        num, unit, what = int(m.group(1)), m.group(2), m.group(3)
        delta = timedelta(minutes=num) if "–º–∏–Ω" in unit else timedelta(hours=num)
        dt = datetime.now() + delta
        add_reminder(uid, dt, what)
        await message.reply(f"‚úÖ {what} ‚è∞ {dt.strftime('%H:%M')}")
        return

    # 5. –ß–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞
    if txt.startswith("—á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞"):
        what = txt.split(":", 1)[1] if ":" in txt else "–¥–µ–ª–æ"
        dt = datetime.now() + timedelta(minutes=30)
        add_reminder(uid, dt, what.strip())
        await message.reply(f"‚úÖ {what} —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞ ({dt.strftime('%H:%M')})")
        return

    # 6. –ß–µ—Ä–µ–∑ –ø–æ–ª–¥–Ω—è
    if txt.startswith("—á–µ—Ä–µ–∑ –ø–æ–ª–¥–Ω—è"):
        what = txt.split(":", 1)[1] if ":" in txt else "–¥–µ–ª–æ"
        dt = datetime.now() + timedelta(hours=12)
        add_reminder(uid, dt, what.strip())
        await message.reply(f"‚úÖ {what} —á–µ—Ä–µ–∑ –ø–æ–ª–¥–Ω—è ({dt.strftime('%H:%M')})")
        return

    # 7. –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    m = re.match(r"—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤\s+(\d{1,2}):(\d{2})[: ]?(.*)", txt)
    if m:
        h, mi, what = int(m.group(1)), int(m.group(2)), m.group(3)
        dt = datetime.now() + timedelta(weeks=1)
        dt = dt.replace(hour=h, minute=mi, second=0, microsecond=0)
        add_reminder(uid, dt, what)
        await message.reply(f"üìÖ {what} —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ {dt.strftime('%H:%M')}")
        return

    # 8. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
    m = re.match(r"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤\s+(\d{1,2}):(\d{2})[: ]?(.*)", txt)
    if m:
        h, mi, what = int(m.group(1)), int(m.group(2)), m.group(3)
        add_repeating(uid, "daily", f"{h}:{mi}", what)
        await message.reply(f"üîÅ {what} ‚è∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ {h:02d}:{mi:02d}")
        return

    # 9. –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
    m = re.match(r"–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤\s+(\w+)\s+(\d{1,2}):(\d{2})[: ]?(.*)", txt)
    if m:
        day, h, mi, what = m.group(1), int(m.group(2)), int(m.group(3)), m.group(4)
        add_repeating(uid, "weekly", f"{day} {h:02d}:{mi:02d}", what)
        await message.reply(f"üóì {what} ‚è∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é {day} {h:02d}:{mi:02d}")
        return

    await message.reply("‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /help.")


# ------------------------------
# –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä
# ------------------------------
async def reminder_worker():
    while True:
        now = datetime.now()
        for rid, uid, t, task in get_reminders():
            dt = datetime.fromisoformat(t)
            if dt <= now:
                await bot.send_message(uid, f"üîî {task}")
                delete_reminder(rid)
        for rid, uid, typ, data, task in get_repeating():
            if typ == "daily":
                h, mi = map(int, data.split(":"))
                if now.hour == h and now.minute == mi and now.second < 5:
                    await bot.send_message(uid, f"üîÅ {task}")
            elif typ == "weekly":
                parts = data.split()
                if len(parts) == 2:
                    day, hm = parts
                    h, mi = map(int, hm.split(":"))
                    weekdays = {"–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6}
                    wd = weekdays.get(day[:2], None)
                    if wd is not None and now.weekday() == wd:
                        if now.hour == h and now.minute == mi and now.second < 5:
                            await bot.send_message(uid, f"üóì {task}")
        await asyncio.sleep(5)


# ------------------------------
# –ó–∞–ø—É—Å–∫
# ------------------------------
async def on_startup(_):
    init_db()
    asyncio.create_task(reminder_worker())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)